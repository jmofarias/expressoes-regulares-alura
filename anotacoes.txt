Expressoes Regulares:

- Módulo 1

. -> significa qualquer caractere
quantifier -> define a quantidade de vezes que o caractere deve aparecer

.*png -> busca uma string que tenha "png" no fim
\d -> buscando por números
\d\d\d -> buscando por 3 números em sequência
\d\d\d\. -> buscando por 3 números em sequência e um ponto
\d\d\d\.\d\d\d\.\d\d\d-\d\d -> buscando pelo padrão do CPF
\d{3}\.\d{3}\.\d{3}-\d{2} -> usando quantifier para buscar CPF
\d{1,3} -> procurando números que tem de um a 3 algarismos
\(\d{2}\) -> procurando 2 números que estão entre parenteses

- Módulo 2

? -> para dizer que o elemento é opcional
[-.] -> dizendo que pode ter um hífen ou ponto
[0123456789] -> mesma coisa que o "\d"
[0-9] -> procura um elemento que tenha um número entre 0 e 9
[1-36-9] -> definindo números entre 1 e 3 e 6 e 9
\s -> procurando por um espaço
\s{1,} -> procurando por um ou mais espaços
\s+ -> procurando por um ou mais espaços
{1,3} -> procurar quantidade de 1 até 3
[12] -> procurar número 1 ou 2
[a-zç] -> ç tem que definir
[^,]+ -> buscar por uma letra maiúscula que acompanhe qualquer coisa várias vezes
[a+] -> dentro dos colchetes o char + não é um quantifier
\w -> para buscar letras maiúsculas ou minúsculas, numeros ou underline [A-Za-z0-9_]
\b -> procura limite de palavras, limite de conjunto de caracteres, antes e depois do elemento nao pode ter um word char (\w) [A-Za-z0-9_]

- Módulo 3

^, $ e \b -> são âncoras
^ -> define o que você quer procurar no início
$ -> define o que você quer procurar no final

\d{3}\.?\d{3}\.?\d{3}-?\d{2} -> dizendo que o ponto é opcional
\d{3}\.?\d{3}\.?\d{3}[-.]?\d{2} -> nova busca pelo CPF
</?code> -> buscando "<code> ou </code>"
[1-3]?\d\s+de\s+[A-Z][a-zç]{3,8}\s+de\s+[12]\d{3} -> buscando uma data ex: "31 de Dezembro de 2022"
7\.[2-9]\s+\-\s+[^,]+ -> buscando por exemplo "7.8 - João"
[A-Z]*ROT[A-Z]+ -> pegando as palavras GARROTE, SERROTE E ROTEIRO de "BALEIRO GARROTE SERROTE GOLEIRO ROTEIRO"

\bde\b -> busca apenas o "de"
^file.+\.html$ -> buscando file no início mais qualquer coisa e com html no final ex: 
.*\.html -> qualquer coisa que tenha .html depois
\Bpor\B -> busca uma palavra que tenha por dentro dela

- Módulo 4

( ) -> seleciona uma classe/grupo
( )? -> seleciona uma classe/grupo e diz que ela é optativa, usada para que mesmo sem os elementos que estão na classe o regex funcione
?: -> para não retornar a classe/grupo
(([a-z]+)\.)+ -> vários caracteres seguidos de um ponto

([0123]?\d)\s+(?:de\s+)?([A-Z][a-zç]{1,8})\s+(?:de\s+)?([12]\d{3}) -> filtrando a data "21 Maio 1993" em classes/grupos e dizendo que não quero retornar os grupos com "de"

([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br) -> filtrando apenas o username ex: super.maria@caelum.com.br

^([\w-]\.?)+@([\w-]+\.)+([A-Za-z]{2,4})+$ -> validando email ex: donkey.kong@kart.com.br

- Módulo 5

.+ -> seleciona tudo
.?+ -> a interrogação faz parar no primeiro elemento que ele encontrar, por exemplo: ".+?>" vai parar no primeiro ">"
\s\w -> percorre vários elementos mesmo com espaço
| -> significa "ou"
\1 -> vai fazer referência ao primeiro grupo
^ -> negação

<h1.+?>([\s\wõ]+)</h1> -> selecionando o conteúdo da h1 em: <h1 class="text-left">Expressões regulares</h1>
<(h1|h2).+?> -> buscando h1 ou h2
<(h1|h2).+?>([\s\wõ]+)</\1> -> ajuste para quando for h1 ou h2
<h1[^>]+> -> vai selecionar tudo que não é >
